
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>usb2spi.h</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 13pt;
    font-weight: 500;
}
</style>


<meta http-equiv="X-UA-Compatible" content="IE=8">
<style>
html {
	overflow-y:scroll;
}

body {
	background-image: url(../../template1/back.png);
	background-repeat: repeat-x;
	background-color: #FFFFFF;
	padding: 0px;
	margin-top: 15px;
	margin-left: 15px;
	margin-bottom: 15px;
	margin-right: 15px;
}

#winchm_template_button {
	position: fixed; 
	float: right; 
	right: 15px; 
	top: 15px;
}

#winchm_template_navigation {
	padding: 0px;
	margin-top: 0px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	font-size: 8pt;
	font-family: Arial, Helvetica, sans-serif;
	color: #4A4A4A;
	text-align: left;
}

#winchm_template_title {
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	font-family: Tahoma, Geneva, sans-serif;
	font-size: 22px;
	font-weight: bold;
	color: #005680;
	text-align: left;
}

#winchm_template_content{
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	width: auto  !important;
	width: 100%;
}


#winchm_template_footer {
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	padding-top: 7px;
	border-width: 1px;
	border-color: #c0c0c0;
	border-top-style: solid;

	font-family: Arial, Helvetica, sans-serif;
	font-size: 10px;
	color: #575757;
	text-align: left;
}

@media print
{
#winchm_template_button{
visibility:hidden;
}
}

#winchm_template_navigation a:link	{text-decoration: none;color: 004080}
#winchm_template_navigation a:visited  {text-decoration: none; color: #004080}
#winchm_template_navigation a:active {text-decoration: none; color: #004080}
#winchm_template_navigation a:hover {text-decoration: none;color: #0000FF}

a:link	{text-decoration: underline; color:#0033cc}
a:visited  {text-decoration: underline; color: #0033cc}
a:active {text-decoration: underline; color: #0033cc }
a:hover {text-decoration: underline;color: #ff0000;}

</style>
</head>
<style type="text/css"> .hll { background-color: #ffffcc }</style>
<style type="text/css">  { background: #ffffff; }</style>
<style type="text/css"> .c { color: #177500 } </style>
<style type="text/css"> .err { color: #000000 } </style>
<style type="text/css"> .k { color: #A90D91 } </style>
<style type="text/css"> .l { color: #1C01CE } </style>
<style type="text/css"> .n { color: #000000 } </style>
<style type="text/css"> .o { color: #000000 } </style>
<style type="text/css"> .ch { color: #177500 } </style>
<style type="text/css"> .cm { color: #177500 } </style>
<style type="text/css"> .cp { color: #633820 } </style>
<style type="text/css"> .cpf { color: #177500 } </style>
<style type="text/css"> .c1 { color: #177500 } </style>
<style type="text/css"> .cs { color: #177500 } </style>
<style type="text/css"> .kc { color: #A90D91 } </style>
<style type="text/css"> .kd { color: #A90D91 } </style>
<style type="text/css"> .kn { color: #A90D91 } </style>
<style type="text/css"> .kp { color: #A90D91 } </style>
<style type="text/css"> .kr { color: #A90D91 } </style>
<style type="text/css"> .kt { color: #A90D91 } </style>
<style type="text/css"> .ld { color: #1C01CE } </style>
<style type="text/css"> .m { color: #1C01CE } </style>
<style type="text/css"> .s { color: #C41A16 } </style>
<style type="text/css"> .na { color: #836C28 } </style>
<style type="text/css"> .nb { color: #A90D91 } </style>
<style type="text/css"> .nc { color: #3F6E75 } </style>
<style type="text/css"> .no { color: #000000 } </style>
<style type="text/css"> .nd { color: #000000 } </style>
<style type="text/css"> .ni { color: #000000 } </style>
<style type="text/css"> .ne { color: #000000 } </style>
<style type="text/css"> .nf { color: #000000 } </style>
<style type="text/css"> .nl { color: #000000 } </style>
<style type="text/css"> .nn { color: #000000 } </style>
<style type="text/css"> .nx { color: #000000 } </style>
<style type="text/css"> .py { color: #000000 } </style>
<style type="text/css"> .nt { color: #000000 } </style>
<style type="text/css"> .nv { color: #000000 } </style>
<style type="text/css"> .ow { color: #000000 } </style>
<style type="text/css"> .mb { color: #1C01CE } </style>
<style type="text/css"> .mf { color: #1C01CE } </style>
<style type="text/css"> .mh { color: #1C01CE } </style>
<style type="text/css"> .mi { color: #1C01CE } </style>
<style type="text/css"> .mo { color: #1C01CE } </style>
<style type="text/css"> .sa { color: #C41A16 } </style>
<style type="text/css"> .sb { color: #C41A16 } </style>
<style type="text/css"> .sc { color: #2300CE } </style>
<style type="text/css"> .dl { color: #C41A16 } </style>
<style type="text/css"> .sd { color: #C41A16 } </style>
<style type="text/css"> .s2 { color: #C41A16 } </style>
<style type="text/css"> .se { color: #C41A16 } </style>
<style type="text/css"> .sh { color: #C41A16 } </style>
<style type="text/css"> .si { color: #C41A16 } </style>
<style type="text/css"> .sx { color: #C41A16 } </style>
<style type="text/css"> .sr { color: #C41A16 } </style>
<style type="text/css"> .s1 { color: #C41A16 } </style>
<style type="text/css"> .ss { color: #C41A16 } </style>
<style type="text/css"> .bp { color: #5B269A } </style>
<style type="text/css"> .fm { color: #000000 } </style>
<style type="text/css"> .vc { color: #000000 } </style>
<style type="text/css"> .vg { color: #000000 } </style>
<style type="text/css"> .vi { color: #000000 } </style>
<style type="text/css"> .vm { color: #000000 } </style>
<style type="text/css"> .il { color: #1C01CE } </style>
<body><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(102);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../../index.htm?page=API函数接口定义原型/C/usb2spi.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 

<div id="winchm_template_button"><A href="usb2sniffer.htm" title="Previous topic"><img id="winchm_template_prev" alt="Previous topic" src="../../template1/btn_prev_n.gif" border="0"></a><A href="usb2uart.htm" title="Next topic"><img id="winchm_template_next" alt="Next topic" src="../../template1/btn_next_n.gif" border="0"></a></div>
<div id="winchm_template_navigation">Help &gt; 
<A href="../函数原型.htm">函数原型</A> &gt; </div>
<div id="winchm_template_title">usb2spi.h</div>
<div id="winchm_template_content">
<div class="highlight"><pre><span></span><span class="cm">/**</span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  * @file    usb2spi.h</span>
<span class="cm">  * $Author: wdluo $</span>
<span class="cm">  * $Revision: 447 $</span>
<span class="cm">  * $Date:: 2013-06-29 18:24:57 +0800 #$</span>
<span class="cm">  * @brief   usb2spi相关函数和数据类型定义.</span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  * @attention</span>
<span class="cm">  *</span>
<span class="cm">  *&lt;center&gt;&lt;a href=&quot;http:\\www.toomoss.com&quot;&gt;http://www.toomoss.com&lt;/a&gt;&lt;/center&gt;</span>
<span class="cm">  *&lt;center&gt;All Rights Reserved&lt;/center&gt;&lt;/h3&gt;</span>
<span class="cm">  * </span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  */</span><span class="w"></span>
<span class="cp">#ifndef __USB2SPI_H_</span>
<span class="cp">#define __USB2SPI_H_</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#ifndef OS_UNIX</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;Windows.h&gt;</span><span class="cp"></span>
<span class="cp">#else</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span><span class="cp"></span>
<span class="cp">#ifndef WINAPI</span>
<span class="cp">#define WINAPI</span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>
<span class="c1">//定义SPI通道</span>
<span class="cp">#define SPI1        (0x00)</span>
<span class="cp">#define SPI1_CS0    (0x00)</span>
<span class="cp">#define SPI1_CS1    (0x10)</span>
<span class="cp">#define SPI1_CS2    (0x20)</span>
<span class="cp">#define SPI1_CS3    (0x30)</span>
<span class="cp">#define SPI1_CS4    (0x40)</span>

<span class="cp">#define SPI2        (0x01)</span>
<span class="cp">#define SPI2_CS0    (0x01)</span>
<span class="cp">#define SPI2_CS1    (0x11)</span>
<span class="cp">#define SPI2_CS2    (0x21)</span>
<span class="cp">#define SPI2_CS3    (0x31)</span>
<span class="cp">#define SPI2_CS4    (0x41)</span>
<span class="c1">//定义工作模式</span>
<span class="cp">#define SPI_MODE_HARD_FDX       0 </span><span class="c1">//硬件控制（全双工模式）</span>
<span class="cp">#define SPI_MODE_HARD_HDX       1 </span><span class="c1">//硬件控制（半双工模式）</span>
<span class="cp">#define SPI_MODE_SOFT_HDX       2 </span><span class="c1">//软件控制（半双工模式）</span>
<span class="cp">#define SPI_MODE_SOFT_ONE_WIRE  3 </span><span class="c1">//单总线模式，数据线输入输出都为MOSI</span>
<span class="cp">#define SPI_MODE_SOFT_FDX       4 </span><span class="c1">//软件控制（全双工模式）</span>
<span class="c1">//定义主从机模式</span>
<span class="cp">#define SPI_MASTER      1 </span><span class="c1">//主机</span>
<span class="cp">#define SPI_SLAVE       0 </span><span class="c1">//从机</span>
<span class="c1">//定义数据移位方式</span>
<span class="cp">#define SPI_MSB         0 </span><span class="c1">//高位在前</span>
<span class="cp">#define SPI_LSB         1 </span><span class="c1">//低位在前</span>
<span class="c1">//定义片选输出极性</span>
<span class="cp">#define SPI_SEL_LOW     0 </span><span class="c1">//片选输出低电平</span>
<span class="cp">#define SPI_SEL_HIGH    1 </span><span class="c1">//片选输出高电平</span>

<span class="c1">//定义EVENT引脚,注意EVENT引脚不要跟SPI通信引脚冲突</span>
<span class="cp">#define SPI_EVENT_P0    (1&lt;&lt;0)</span>
<span class="cp">#define SPI_EVENT_P1    (1&lt;&lt;1)</span>
<span class="cp">#define SPI_EVENT_P2    (1&lt;&lt;2)</span>
<span class="cp">#define SPI_EVENT_P3    (1&lt;&lt;3)</span>
<span class="cp">#define SPI_EVENT_P4    (1&lt;&lt;4)</span>
<span class="cp">#define SPI_EVENT_P5    (1&lt;&lt;5)</span>
<span class="cp">#define SPI_EVENT_P6    (1&lt;&lt;6)</span>
<span class="cp">#define SPI_EVENT_P7    (1&lt;&lt;7)</span>
<span class="cp">#define SPI_EVENT_P8    (1&lt;&lt;8)</span>
<span class="cp">#define SPI_EVENT_P9    (1&lt;&lt;9)</span>
<span class="cp">#define SPI_EVENT_P10    (1&lt;&lt;10)</span>
<span class="cp">#define SPI_EVENT_P11    (1&lt;&lt;11)</span>
<span class="cp">#define SPI_EVENT_P12    (1&lt;&lt;12)</span>
<span class="cp">#define SPI_EVENT_P13    (1&lt;&lt;13)</span>
<span class="cp">#define SPI_EVENT_P14    (1&lt;&lt;14)</span>
<span class="cp">#define SPI_EVENT_P15    (1&lt;&lt;15)</span>

<span class="c1">//定义事件类型</span>
<span class="cp">#define EVENT_TYPE_LOW      0x00</span>
<span class="cp">#define EVENT_TYPE_HIGH     0x11</span>
<span class="cp">#define EVENT_TYPE_RISING   0x01</span>
<span class="cp">#define EVENT_TYPE_FALLING  0x10</span>

<span class="c1">//定义从机模式下连续读取数据的回调函数</span>
<span class="k">typedef</span><span class="w">  </span><span class="kt">int</span><span class="w"> </span><span class="p">(</span><span class="n">WINAPI</span><span class="w"> </span><span class="o">*</span><span class="n">PSPI_GET_DATA_HANDLE</span><span class="p">)(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">DataNum</span><span class="p">);</span><span class="c1">//接收数据回掉函数</span>

<span class="c1">//定义初始化SPI的数据类型</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_SPI_CONFIG</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w">   </span><span class="n">Mode</span><span class="p">;</span><span class="w">              </span><span class="c1">//SPI控制方式:0-硬件控制（全双工模式）,1-硬件控制（半双工模式），2-软件控制（半双工模式）,3-单总线模式，数据线输入输出都为MOSI,4-软件控制（全双工模式）</span>
<span class="w">    </span><span class="kt">char</span><span class="w">   </span><span class="n">Master</span><span class="p">;</span><span class="w">            </span><span class="c1">//主从选择控制:0-从机，1-主机</span>
<span class="w">    </span><span class="kt">char</span><span class="w">   </span><span class="n">CPOL</span><span class="p">;</span><span class="w">              </span><span class="c1">//时钟极性控制:0-SCK空闲时为低电平，1-SCK空闲时为高电平</span>
<span class="w">    </span><span class="kt">char</span><span class="w">   </span><span class="n">CPHA</span><span class="p">;</span><span class="w">              </span><span class="c1">//时钟相位控制:0-第一个SCK时钟采样，1-第二个SCK时钟采样</span>
<span class="w">    </span><span class="kt">char</span><span class="w">   </span><span class="n">LSBFirst</span><span class="p">;</span><span class="w">          </span><span class="c1">//数据移位方式:0-MSB在前，1-LSB在前</span>
<span class="w">    </span><span class="kt">char</span><span class="w">   </span><span class="n">SelPolarity</span><span class="p">;</span><span class="w">       </span><span class="c1">//片选信号极性:0-低电平选中，1-高电平选中</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">ClockSpeedHz</span><span class="p">;</span><span class="c1">//SPI时钟频率:单位为HZ，硬件模式下最大50000000，最小390625，频率按2的倍数改变</span>
<span class="p">}</span><span class="n">SPI_CONFIG</span><span class="p">,</span><span class="o">*</span><span class="n">PSPI_CONFIG</span><span class="p">;</span><span class="w"></span>

<span class="c1">//定义SPI Flash器件配置参数数据类型</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_SPI_FLASH_CONFIG</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_WriteEnable</span><span class="p">;</span><span class="w">          </span><span class="c1">//使能写命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_WriteDisable</span><span class="p">;</span><span class="w">         </span><span class="c1">//禁止写命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_WritePage</span><span class="p">;</span><span class="w">            </span><span class="c1">//写数据命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">WritePageAddressBytes</span><span class="p">;</span><span class="w">    </span><span class="c1">//写数据时的地址宽度，单位为字节</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_EraseSector</span><span class="p">;</span><span class="w">          </span><span class="c1">//扇区擦出命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EraseSectorAddressBytes</span><span class="p">;</span><span class="w">  </span><span class="c1">//扇区擦出的地址宽度，单位为字节</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_EraseBulk</span><span class="p">;</span><span class="w">            </span><span class="c1">//块擦出命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_EraseChip</span><span class="p">;</span><span class="w">            </span><span class="c1">//整片擦出命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_ReadID</span><span class="p">;</span><span class="w">               </span><span class="c1">//读芯片ID命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_ReadData</span><span class="p">;</span><span class="w">             </span><span class="c1">//读数据命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">ReadDataAddressBytes</span><span class="p">;</span><span class="w">     </span><span class="c1">//读数据时的地址宽度，单位为字节</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_ReadFast</span><span class="p">;</span><span class="w">             </span><span class="c1">//快速模式读数据命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">ReadFastAddressBytes</span><span class="p">;</span><span class="w">     </span><span class="c1">//快速读数据时的地址宽度，单位为字节</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_ReadStatus</span><span class="p">;</span><span class="w">           </span><span class="c1">//读取状态寄存器命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CMD_WriteStatus</span><span class="p">;</span><span class="w">          </span><span class="c1">//写状态寄存器命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">ID</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span><span class="w">                   </span><span class="c1">//芯片ID存储数组</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">ID_Length</span><span class="p">;</span><span class="w">                </span><span class="c1">//ID长度，单位为字节</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">PageSize</span><span class="p">;</span><span class="w">                           </span><span class="c1">//页大小，单位为字节</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">NumPages</span><span class="p">;</span><span class="w">                           </span><span class="c1">//芯片总的页数</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">SectorSize</span><span class="p">;</span><span class="w">                         </span><span class="c1">//扇区大小，单位为字节</span>
<span class="p">}</span><span class="n">SPI_FLASH_CONFIG</span><span class="p">,</span><span class="o">*</span><span class="n">PSPI_FLASH_CONFIG</span><span class="p">;</span><span class="w"></span>

<span class="c1">//定义函数返回错误代码</span>
<span class="cp">#define SPI_SUCCESS             (0)   </span><span class="c1">//函数执行成功</span>
<span class="cp">#define SPI_ERR_NOT_SUPPORT     (-1)  </span><span class="c1">//适配器不支持该函数</span>
<span class="cp">#define SPI_ERR_USB_WRITE_FAIL  (-2)  </span><span class="c1">//USB写数据失败</span>
<span class="cp">#define SPI_ERR_USB_READ_FAIL   (-3)  </span><span class="c1">//USB读数据失败</span>
<span class="cp">#define SPI_ERR_CMD_FAIL        (-4)  </span><span class="c1">//命令执行失败</span>
<span class="cp">#define SPI_ERR_PARAMETER       (-5)  </span><span class="c1">//参数错误</span>
<span class="cp">#define SPI_ERR_EVENT_TIMEOUT   (-6)  </span><span class="c1">//检测Event超时</span>
<span class="cp">#ifdef __cplusplus</span>
<span class="k">extern</span><span class="w"> </span><span class="s">&quot;C&quot;</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="cp">#endif</span>
<span class="cm">/**</span>
<span class="cm">  * @brief  SPI初始化配置函数</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pConfig SPI初始化配置结构体指针</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_Init</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PSPI_CONFIG</span><span class="w"> </span><span class="n">pConfig</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI发送数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 数据发送缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 数据发送字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI异步方式发送数据，函数调用之后不会等待数据发送完毕，该方式可以加大数据发送速率</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 数据发送缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 数据发送字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteBytesAsync</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI接收数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  ReadLen 接收数据字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_ReadBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI发送接收数据，全双工模式下发送和接收同时进行，半双工模式下发送和接收分开进行，整个操作过程片选一直有效</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 发送数据缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 发送数据字节数</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  ReadLen 接收数据字节数</span>
<span class="cm">  * @param  IntervalTime 半双工模式下，发送数据和接收数据之间的时间间隔，单位为微妙</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteReadBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">IntervalTimeUs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  等到有效事件后SPI发送数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 数据发送缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 数据发送字节数</span>
<span class="cm">  * @param  EventPin 等待事件的GPIO引脚</span>
<span class="cm">  * @param  EventType 事件类型，0x00-低电平，0x11-高电平，0x10-下降沿，0x01上升沿</span>
<span class="cm">  * @param  TimeOutOfMs 等待事件超时时间，单位为毫秒</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteBytesOfEvent</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">EventPin</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EventType</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutOfMs</span><span class="p">);</span><span class="w"></span>


<span class="cm">/**</span>
<span class="cm">  * @brief  等到有效事件后SPI接收数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  ReadLen 接收数据字节数</span>
<span class="cm">  * @param  EventPin 等待事件的GPIO引脚</span>
<span class="cm">  * @param  EventType 事件类型，0x00-低电平，0x11-高电平，0x10-下降沿，0x01上升沿</span>
<span class="cm">  * @param  TimeOutOfMs 等待事件超时时间，单位为毫秒</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_ReadBytesOfEvent</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">EventPin</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EventType</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutOfMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  等到有效事件后SPI发送接收数据，全双工模式下发送和接收同时进行，半双工模式下发送和接收分开进行，整个操作过程片选一直有效</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 发送数据缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 发送数据字节数</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  ReadLen 接收数据字节数</span>
<span class="cm">  * @param  IntervalTime 半双工模式下，发送数据和接收数据之间的时间间隔，单位为微妙</span>
<span class="cm">  * @param  EventPin 等待事件的GPIO引脚</span>
<span class="cm">  * @param  EventType 事件类型，0x00-低电平，0x11-高电平，0x10-下降沿，0x01上升沿</span>
<span class="cm">  * @param  TimeOutOfMs 等待事件超时时间，单位为毫秒</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteReadBytesOfEvent</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">IntervalTimeUs</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">EventPin</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EventType</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutOfMs</span><span class="p">);</span><span class="w"></span>


<span class="cm">/**</span>
<span class="cm">  * @brief  二进制模式写数据，该函数可以发送任意bit数数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteBitStr 二进制数据字符串，如：&quot;100110011&quot;</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteBits</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteBitStr</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  二进制模式读数据，该函数可以读取任意bit数数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadBitStr 读取到的二进制数据字符串，如：&quot;100110011&quot;</span>
<span class="cm">  * @param  ReadBitsNum 读取数据的二进制bit数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_ReadBits</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadBitStr</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadBitsNum</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  二进制模式写读数据，该函数可以写读取任意bit数数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteBitStr 写二进制数据字符串，如：&quot;100110011&quot;</span>
<span class="cm">  * @param  pReadBitStr 读取到的二进制数据字符串，如：&quot;100110011&quot;</span>
<span class="cm">  * @param  ReadBitsNum 读取数据的二进制bit数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_WriteReadBits</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteBitStr</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadBitStr</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadBitsNum</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下将数据写入数据发送缓冲区，等待主机的时钟信号再将数据发送出去</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 发送数据缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 发送数据字节数</span>
<span class="cm">  * @param  TimeOutMs 等待数据发送完毕超时时间，若小于或者等于0则不会等待数据发送完毕，函数立即返回</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错，大于0表示成功发送的字节数</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveWriteBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下接收数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  pReadLen 准备接收数据的字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错，大于0表示接收到的数据字节数</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveReadBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下读写数据，全双工模式下读写数据同时进行，半双工模式下先读数据，然后再写数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 从机模式下接收数据缓冲区地址</span>
<span class="cm">  * @param  ReadDataLen 从机模式下接收数据的长度</span>
<span class="cm">  * @param  pReadReadLen 从机数据收发字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错，大于0则高16位是成功发送的数据字节数，低16位是成功读取的数据字节数</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveReadWriteBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadDataLen</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteDataLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下同时发送接收数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 发送数据缓冲区首地址</span>
<span class="cm">  * @param  WriteDataLen 从机数据发送字节数</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  pReadReadLen 从机数据读取字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错，大于0则高16位是成功发送的数据字节数，低16位是成功读取的数据字节数</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveWriteReadBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteDataLen</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadDataLen</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下连续读取数据,SPI在从机模式下接收到数据之后，通过回调函数传出数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pSlaveReadDataHandle 从机模式下接收到数据后的回调函数，若传入NULL，则可以通过调用SPI_SlaveGetBytes函数来获取缓冲区中接收到的数据</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveContinueRead</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="n">PSPI_GET_DATA_HANDLE</span><span class="w"> </span><span class="n">pSlaveReadDataHandle</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下获取接收数据缓冲区的数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  BufferSize 缓冲区长度</span>
<span class="cm">  * @retval 获取到的数据字节数</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveGetBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BufferSize</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  从SPI数据缓冲区中读取数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 数据接收缓冲区首地址</span>
<span class="cm">  * @param  TimeOutMs 等待数据超时时间</span>
<span class="cm">  * @retval 获取到的数据字节数</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveReadBytesFromBuffer</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>
<span class="cm">/**</span>
<span class="cm">  * @brief  停止SPI从机模式下连续读取数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveContinueWriteReadStop</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  SPI从机模式下连续发送数据，也就是将数据放到数据缓冲区中，主机来读取的时候会自动循环发送</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 需要循环发送的数据缓冲区指针</span>
<span class="cm">  * @param  WriteDataNum 待发送的数据字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_SlaveContinueWrite</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  读写SPI-Flash初始化配置</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  ClockSpeed SPI时钟信号频率，单位为Hz,最大为50MHz，依次成倍递减</span>
<span class="cm">  * @param  pConfig SPI-Flash相关参数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashInit</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ClockSpeed</span><span class="p">,</span><span class="w"> </span><span class="n">PSPI_FLASH_CONFIG</span><span class="w"> </span><span class="n">pConfig</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  读取SPI-Flash芯片的ID号</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pID 芯片ID号存储首地址，其长度由SPI_FLASH_CONFIG中的ID_Length决定</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashReadID</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pID</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  擦除SPI-Flash的扇区数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  StartSector 起始扇区号，注意是扇区号，不是具体的扇区地址</span>
<span class="cm">  * @param  NumSector 需要擦除的扇区数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashEraseSector</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">StartSector</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">NumSector</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  擦除SPI-Flash整个芯片的数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashEraseChip</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  擦除SPI-Flash的数据，根据传入的指令不一样，可以是扇区擦除，块擦除，整片擦除</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  StartAddr 擦除数据的起始地址</span>
<span class="cm">  * @param  AddrBytes 地址字节数，一般是3字节</span>
<span class="cm">  * @param  EraseCmd 擦除数据命令，不同的擦除方式，命令值不一样</span>
<span class="cm">  * @param  TimeOutMs 等待擦除完毕超时时间，若超时时间到之后还没擦除完毕，则返回超时错误</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashErase</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">StartAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">AddrBytes</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EraseCmd</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  向SPI-Flash写数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  StartAddr 写数据起始地址</span>
<span class="cm">  * @param  pWriteData 写数据缓冲区首地址</span>
<span class="cm">  * @param  WriteLen 写数据字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashWrite</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">StartAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  从SPI-Flash读数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  StartAddr 写数据起始地址</span>
<span class="cm">  * @param  pReadData 读数据缓冲区首地址</span>
<span class="cm">  * @param  ReadLen 读数据字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashRead</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">StartAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  从SPI-Flash读数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  StartAddr 写数据起始地址</span>
<span class="cm">  * @param  pReadData 读数据缓冲区首地址</span>
<span class="cm">  * @param  ReadLen 读数据字节数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_FlashReadFast</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">StartAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadLen</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  Block模式写数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 写数据起始地址</span>
<span class="cm">  * @param  BlockSize 每次写数据字节数</span>
<span class="cm">  * @param  BlockNum 写数据总次数</span>
<span class="cm">  * @param  IntervalTime 每次写数据之间的时间间隔，单位为微妙</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_BlockWriteBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockSize</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockNum</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">IntervalTimeUs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  Block模式读数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 读数据缓冲区首地址</span>
<span class="cm">  * @param  BlockSize 每次读数据字节数</span>
<span class="cm">  * @param  BlockNum 读数据总次数</span>
<span class="cm">  * @param  IntervalTime 每次写数据之间的时间间隔，单位为微妙</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_BlockReadBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockSize</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockNum</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">IntervalTimeUs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  Block模式写读数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 写数据起始地址</span>
<span class="cm">  * @param  WriteBlockSize 每次读数据字节数</span>
<span class="cm">  * @param  pReadData 读数据缓冲区首地址</span>
<span class="cm">  * @param  ReadBlockSize 每次读数据字节数</span>
<span class="cm">  * @param  BlockNum 读数据总次数</span>
<span class="cm">  * @param  IntervalTime 每次写数据之间的时间间隔，单位为微妙</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_BlockWriteReadBytes</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteBlockSize</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadBlockSize</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockNum</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">IntervalTimeUs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  Block模式写数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 写数据起始地址</span>
<span class="cm">  * @param  BlockSize 每次写数据字节数</span>
<span class="cm">  * @param  BlockNum 写数据总次数</span>
<span class="cm">  * @param  EventPin 等待事件的GPIO引脚</span>
<span class="cm">  * @param  EventType 事件类型，0x00-低电平，0x11-高电平，0x10-下降沿，0x01上升沿</span>
<span class="cm">  * @param  TimeOutOfMs 等待事件超时时间，单位为毫秒</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_BlockWriteBytesOfEvent</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockSize</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockNum</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">EventPin</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EventType</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutOfMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  Block模式读数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pReadData 读数据缓冲区首地址</span>
<span class="cm">  * @param  BlockSize 每次读数据字节数</span>
<span class="cm">  * @param  BlockNum 读数据总次数</span>
<span class="cm">  * @param  EventPin 等待事件的GPIO引脚</span>
<span class="cm">  * @param  EventType 事件类型，0x00-低电平，0x11-高电平，0x10-下降沿，0x01上升沿</span>
<span class="cm">  * @param  TimeOutOfMs 等待事件超时时间，单位为毫秒</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_BlockReadBytesOfEvent</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockSize</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockNum</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">EventPin</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EventType</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutOfMs</span><span class="p">);</span><span class="w"></span>

<span class="cm">/**</span>
<span class="cm">  * @brief  Block模式写读数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  SPIIndex SPI通道号，取值0或者1</span>
<span class="cm">  * @param  pWriteData 写数据起始地址</span>
<span class="cm">  * @param  WriteBlockSize 每次读数据字节数</span>
<span class="cm">  * @param  pReadData 读数据缓冲区首地址</span>
<span class="cm">  * @param  ReadBlockSize 每次读数据字节数</span>
<span class="cm">  * @param  BlockNum 读数据总次数</span>
<span class="cm">  * @param  EventPin 等待事件的GPIO引脚</span>
<span class="cm">  * @param  EventType 事件类型，0x00-低电平，0x11-高电平，0x10-下降沿，0x01上升沿</span>
<span class="cm">  * @param  TimeOutOfMs 等待事件超时时间，单位为毫秒</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">SPI_BlockWriteReadBytesOfEvent</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">SPIIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pWriteData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">WriteBlockSize</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pReadData</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">ReadBlockSize</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BlockNum</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">EventPin</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">EventType</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOutOfMs</span><span class="p">);</span><span class="w"></span>

<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span><span class="w"></span>
<span class="cp">#endif</span>

<span class="cp">#endif</span>
</pre></div>
</div> 
<div id="winchm_template_footer">Copyright &copy; 2018. All rights reserved.</div>
</body>
</html>
