
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>usb2can.h</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 13pt;
    font-weight: 500;
}
</style>


<meta http-equiv="X-UA-Compatible" content="IE=8">
<style>
html {
	overflow-y:scroll;
}

body {
	background-image: url(../../template1/back.png);
	background-repeat: repeat-x;
	background-color: #FFFFFF;
	padding: 0px;
	margin-top: 15px;
	margin-left: 15px;
	margin-bottom: 15px;
	margin-right: 15px;
}

#winchm_template_button {
	position: fixed; 
	float: right; 
	right: 15px; 
	top: 15px;
}

#winchm_template_navigation {
	padding: 0px;
	margin-top: 0px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	font-size: 8pt;
	font-family: Arial, Helvetica, sans-serif;
	color: #4A4A4A;
	text-align: left;
}

#winchm_template_title {
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	font-family: Tahoma, Geneva, sans-serif;
	font-size: 22px;
	font-weight: bold;
	color: #005680;
	text-align: left;
}

#winchm_template_content{
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	width: auto  !important;
	width: 100%;
}


#winchm_template_footer {
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	padding-top: 7px;
	border-width: 1px;
	border-color: #c0c0c0;
	border-top-style: solid;

	font-family: Arial, Helvetica, sans-serif;
	font-size: 10px;
	color: #575757;
	text-align: left;
}

@media print
{
#winchm_template_button{
visibility:hidden;
}
}

#winchm_template_navigation a:link	{text-decoration: none;color: 004080}
#winchm_template_navigation a:visited  {text-decoration: none; color: #004080}
#winchm_template_navigation a:active {text-decoration: none; color: #004080}
#winchm_template_navigation a:hover {text-decoration: none;color: #0000FF}

a:link	{text-decoration: underline; color:#0033cc}
a:visited  {text-decoration: underline; color: #0033cc}
a:active {text-decoration: underline; color: #0033cc }
a:hover {text-decoration: underline;color: #ff0000;}

</style>
</head>
<style type="text/css"> .hll { background-color: #ffffcc }</style>
<style type="text/css">  { background: #ffffff; }</style>
<style type="text/css"> .c { color: #177500 } </style>
<style type="text/css"> .err { color: #000000 } </style>
<style type="text/css"> .k { color: #A90D91 } </style>
<style type="text/css"> .l { color: #1C01CE } </style>
<style type="text/css"> .n { color: #000000 } </style>
<style type="text/css"> .o { color: #000000 } </style>
<style type="text/css"> .ch { color: #177500 } </style>
<style type="text/css"> .cm { color: #177500 } </style>
<style type="text/css"> .cp { color: #633820 } </style>
<style type="text/css"> .cpf { color: #177500 } </style>
<style type="text/css"> .c1 { color: #177500 } </style>
<style type="text/css"> .cs { color: #177500 } </style>
<style type="text/css"> .kc { color: #A90D91 } </style>
<style type="text/css"> .kd { color: #A90D91 } </style>
<style type="text/css"> .kn { color: #A90D91 } </style>
<style type="text/css"> .kp { color: #A90D91 } </style>
<style type="text/css"> .kr { color: #A90D91 } </style>
<style type="text/css"> .kt { color: #A90D91 } </style>
<style type="text/css"> .ld { color: #1C01CE } </style>
<style type="text/css"> .m { color: #1C01CE } </style>
<style type="text/css"> .s { color: #C41A16 } </style>
<style type="text/css"> .na { color: #836C28 } </style>
<style type="text/css"> .nb { color: #A90D91 } </style>
<style type="text/css"> .nc { color: #3F6E75 } </style>
<style type="text/css"> .no { color: #000000 } </style>
<style type="text/css"> .nd { color: #000000 } </style>
<style type="text/css"> .ni { color: #000000 } </style>
<style type="text/css"> .ne { color: #000000 } </style>
<style type="text/css"> .nf { color: #000000 } </style>
<style type="text/css"> .nl { color: #000000 } </style>
<style type="text/css"> .nn { color: #000000 } </style>
<style type="text/css"> .nx { color: #000000 } </style>
<style type="text/css"> .py { color: #000000 } </style>
<style type="text/css"> .nt { color: #000000 } </style>
<style type="text/css"> .nv { color: #000000 } </style>
<style type="text/css"> .ow { color: #000000 } </style>
<style type="text/css"> .mb { color: #1C01CE } </style>
<style type="text/css"> .mf { color: #1C01CE } </style>
<style type="text/css"> .mh { color: #1C01CE } </style>
<style type="text/css"> .mi { color: #1C01CE } </style>
<style type="text/css"> .mo { color: #1C01CE } </style>
<style type="text/css"> .sa { color: #C41A16 } </style>
<style type="text/css"> .sb { color: #C41A16 } </style>
<style type="text/css"> .sc { color: #2300CE } </style>
<style type="text/css"> .dl { color: #C41A16 } </style>
<style type="text/css"> .sd { color: #C41A16 } </style>
<style type="text/css"> .s2 { color: #C41A16 } </style>
<style type="text/css"> .se { color: #C41A16 } </style>
<style type="text/css"> .sh { color: #C41A16 } </style>
<style type="text/css"> .si { color: #C41A16 } </style>
<style type="text/css"> .sx { color: #C41A16 } </style>
<style type="text/css"> .sr { color: #C41A16 } </style>
<style type="text/css"> .s1 { color: #C41A16 } </style>
<style type="text/css"> .ss { color: #C41A16 } </style>
<style type="text/css"> .bp { color: #5B269A } </style>
<style type="text/css"> .fm { color: #000000 } </style>
<style type="text/css"> .vc { color: #000000 } </style>
<style type="text/css"> .vg { color: #000000 } </style>
<style type="text/css"> .vi { color: #000000 } </style>
<style type="text/css"> .vm { color: #000000 } </style>
<style type="text/css"> .il { color: #1C01CE } </style>
<body><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(88);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../../index.htm?page=API函数接口定义原型/C/usb2can.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 

<div id="winchm_template_button"><A href="usb2ads1256.htm" title="Previous topic"><img id="winchm_template_prev" alt="Previous topic" src="../../template1/btn_prev_n.gif" border="0"></a><A href="usb2canfd.htm" title="Next topic"><img id="winchm_template_next" alt="Next topic" src="../../template1/btn_next_n.gif" border="0"></a></div>
<div id="winchm_template_navigation">Help &gt; 
<A href="../函数原型.htm">函数原型</A> &gt; </div>
<div id="winchm_template_title">usb2can.h</div>
<div id="winchm_template_content">
<div class="highlight"><pre><span></span><span class="cm">/**</span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  * @file    usb2can.h</span>
<span class="cm">  * $Author: wdluo $</span>
<span class="cm">  * $Revision: 447 $</span>
<span class="cm">  * $Date:: 2013-06-29 18:24:57 +0800 #$</span>
<span class="cm">  * @brief   usb2can相关函数和数据类型定义.</span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  * @attention</span>
<span class="cm">  *</span>
<span class="cm">  *&lt;center&gt;&lt;a href=&quot;http:\\www.toomoss.com&quot;&gt;http://www.toomoss.com&lt;/a&gt;&lt;/center&gt;</span>
<span class="cm">  *&lt;center&gt;All Rights Reserved&lt;/center&gt;&lt;/h3&gt;</span>
<span class="cm">  * </span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  */</span><span class="w"></span>
<span class="cp">#ifndef __USB2CAN_H_</span>
<span class="cp">#define __USB2CAN_H_</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&quot;offline_type.h&quot;</span><span class="cp"></span>
<span class="cp">#ifndef OS_UNIX</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;Windows.h&gt;</span><span class="cp"></span>
<span class="cp">#else</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span><span class="cp"></span>
<span class="cp">#ifndef WINAPI</span>
<span class="cp">#define WINAPI</span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>

<span class="c1">//1.CAN信息帧的数据类型定义</span>
<span class="k">typedef</span><span class="w">  </span><span class="k">struct</span><span class="w">  </span><span class="nc">_CAN_MSG</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">ID</span><span class="p">;</span><span class="w">           </span><span class="c1">//报文ID。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">TimeStamp</span><span class="p">;</span><span class="w">    </span><span class="c1">//接收到信息帧时的时间标识，从CAN 控制器初始化开始计时。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">RemoteFlag</span><span class="p">;</span><span class="w">   </span><span class="c1">//是否是远程帧</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">ExternFlag</span><span class="p">;</span><span class="w">   </span><span class="c1">//是否是扩展帧</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">DataLen</span><span class="p">;</span><span class="w">      </span><span class="c1">//数据长度(&lt;=8)，即Data 的长度。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">Data</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="w">      </span><span class="c1">//报文的数据。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">TimeStampHigh</span><span class="p">;</span><span class="c1">//时间戳高位</span>
<span class="p">}</span><span class="n">CAN_MSG</span><span class="p">,</span><span class="o">*</span><span class="n">PCAN_MSG</span><span class="p">;</span><span class="w"></span>

<span class="c1">//2.初始化CAN的数据类型定义</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_CAN_INIT_CONFIG</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">//CAN波特率 = 100MHz/(CAN_BRP)/(CAN_SJW+CAN_BS1+CAN_BS2)</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">CAN_BRP</span><span class="p">;</span><span class="w">    </span><span class="c1">//取值范围1~1024</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_SJW</span><span class="p">;</span><span class="w">    </span><span class="c1">//取值范围1~4</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_BS1</span><span class="p">;</span><span class="w">    </span><span class="c1">//取值范围1~16</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_BS2</span><span class="p">;</span><span class="w">    </span><span class="c1">//取值范围1~8</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_Mode</span><span class="p">;</span><span class="w">   </span><span class="c1">//CAN工作模式，0-正常模式，1-环回模式，2-静默模式，3-静默环回模式，bit7为1则接入适配器内部终端电阻，否则不接入</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_ABOM</span><span class="p">;</span><span class="w">   </span><span class="c1">//自动离线管理，0-禁止，1-使能</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_NART</span><span class="p">;</span><span class="w">   </span><span class="c1">//报文重发管理，0-使能报文重传，1-禁止报文重传</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_RFLM</span><span class="p">;</span><span class="w">   </span><span class="c1">//FIFO锁定管理，0-新报文覆盖旧报文，1-丢弃新报文</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">CAN_TXFP</span><span class="p">;</span><span class="w">   </span><span class="c1">//发送优先级管理，0-标识符决定，1-发送请求顺序决定</span>
<span class="p">}</span><span class="n">CAN_INIT_CONFIG</span><span class="p">,</span><span class="o">*</span><span class="n">PCAN_INIT_CONFIG</span><span class="p">;</span><span class="w"></span>


<span class="c1">//3.CAN 滤波器设置数据类型定义</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_CAN_FILTER_CONFIG</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">Enable</span><span class="p">;</span><span class="w">         </span><span class="c1">//使能该过滤器，1-使能，0-禁止</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">FilterIndex</span><span class="p">;</span><span class="w">    </span><span class="c1">//过滤器索引号，取值范围为0到13</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">FilterMode</span><span class="p">;</span><span class="w">     </span><span class="c1">//过滤器模式，0-屏蔽位模式，1-标识符列表模式</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">ExtFrame</span><span class="p">;</span><span class="w">       </span><span class="c1">//过滤的帧类型标志，为1 代表要过滤的为扩展帧，为0 代表要过滤的为标准帧。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">ID_Std_Ext</span><span class="p">;</span><span class="w">     </span><span class="c1">//验收码ID</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">ID_IDE</span><span class="p">;</span><span class="w">         </span><span class="c1">//验收码IDE</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">ID_RTR</span><span class="p">;</span><span class="w">         </span><span class="c1">//验收码RTR</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">MASK_Std_Ext</span><span class="p">;</span><span class="w">   </span><span class="c1">//屏蔽码ID，该项只有在过滤器模式为屏蔽位模式时有用</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">MASK_IDE</span><span class="p">;</span><span class="w">       </span><span class="c1">//屏蔽码IDE，该项只有在过滤器模式为屏蔽位模式时有用</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">MASK_RTR</span><span class="p">;</span><span class="w">       </span><span class="c1">//屏蔽码RTR，该项只有在过滤器模式为屏蔽位模式时有用</span>
<span class="p">}</span><span class="w"> </span><span class="n">CAN_FILTER_CONFIG</span><span class="p">,</span><span class="o">*</span><span class="n">PCAN_FILTER_CONFIG</span><span class="p">;</span><span class="w"></span>
<span class="c1">//4.CAN总线状态数据类型定义</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_CAN_STATUS</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">TSR</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w">    </span><span class="n">ESR</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">RECounter</span><span class="p">;</span><span class="w">  </span><span class="c1">//CAN 控制器接收错误寄存器。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">TECounter</span><span class="p">;</span><span class="w">  </span><span class="c1">//CAN 控制器发送错误寄存器。</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">LECode</span><span class="p">;</span><span class="w">     </span><span class="c1">//最后的错误代码</span>
<span class="p">}</span><span class="n">CAN_STATUS</span><span class="p">,</span><span class="o">*</span><span class="n">PCAN_STATUS</span><span class="p">;</span><span class="w"></span>
<span class="c1">//5.定义CAN Bootloader命令列表</span>
<span class="k">typedef</span><span class="w">  </span><span class="k">struct</span><span class="w">  </span><span class="nc">_CBL_CMD_LIST</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="c1">//Bootloader相关命令</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">Erase</span><span class="p">;</span><span class="w">          </span><span class="c1">//擦出APP储存扇区数据</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">WriteInfo</span><span class="p">;</span><span class="w">      </span><span class="c1">//设置多字节写数据相关参数（写起始地址，数据量）</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">Write</span><span class="p">;</span><span class="w">          </span><span class="c1">//以多字节形式写数据</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">Check</span><span class="p">;</span><span class="w">          </span><span class="c1">//检测节点是否在线，同时返回固件信息</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">SetBaudRate</span><span class="p">;</span><span class="w">    </span><span class="c1">//设置节点波特率</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">   </span><span class="n">Excute</span><span class="p">;</span><span class="w">         </span><span class="c1">//执行固件</span>
<span class="w">    </span><span class="c1">//节点返回状态</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">    </span><span class="n">CmdSuccess</span><span class="p">;</span><span class="w">      </span><span class="c1">//命令执行成功</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w">    </span><span class="n">CmdFaild</span><span class="p">;</span><span class="w">        </span><span class="c1">//命令执行失败</span>
<span class="p">}</span><span class="w"> </span><span class="n">CBL_CMD_LIST</span><span class="p">,</span><span class="o">*</span><span class="n">PCBL_CMD_LIST</span><span class="p">;</span><span class="w"> </span>

<span class="c1">//6.函数返回错误代码定义</span>
<span class="cp">#define CAN_SUCCESS             (0)   </span><span class="c1">//函数执行成功</span>
<span class="cp">#define CAN_ERR_NOT_SUPPORT     (-1)  </span><span class="c1">//适配器不支持该函数</span>
<span class="cp">#define CAN_ERR_USB_WRITE_FAIL  (-2)  </span><span class="c1">//USB写数据失败</span>
<span class="cp">#define CAN_ERR_USB_READ_FAIL   (-3)  </span><span class="c1">//USB读数据失败</span>
<span class="cp">#define CAN_ERR_CMD_FAIL        (-4)  </span><span class="c1">//命令执行失败</span>
<span class="cp">#define CAN_BL_ERR_CONFIG       (-20) </span><span class="c1">//配置设备错误</span>
<span class="cp">#define CAN_BL_ERR_SEND         (-21) </span><span class="c1">//发送数据出错</span>
<span class="cp">#define CAN_BL_ERR_TIME_OUT     (-22) </span><span class="c1">//超时错误</span>
<span class="cp">#define CAN_BL_ERR_CMD          (-23) </span><span class="c1">//执行命令失败</span>

<span class="cp">#define CAN_BOOT_ERR_CONFIG       (-30) </span><span class="c1">//配置设备错误</span>
<span class="cp">#define CAN_BOOT_ERR_SEND         (-31) </span><span class="c1">//发送数据出错</span>
<span class="cp">#define CAN_BOOT_ERR_TIME_OUT     (-32) </span><span class="c1">//超时错误</span>
<span class="cp">#define CAN_BOOT_ERR_CMD          (-33) </span><span class="c1">//执行命令失败</span>
<span class="cp">#define CAN_BOOT_ERR_BAUD         (-34) </span><span class="c1">//波特率参数自动获取失败</span>
<span class="cp">#define CAN_BOOT_ERR_BUFFER       (-35) </span><span class="c1">//从设备返回接收数据缓冲区大小为0</span>
<span class="c1">//7.CAN Bootloader固件类型</span>
<span class="cp">#define CAN_BL_BOOT     0x55555555</span>
<span class="cp">#define CAN_BL_APP      0xAAAAAAAA</span>
<span class="c1">//8.中继模式定义</span>
<span class="cp">#define CAN_RELAY_NONE      0x00    </span><span class="c1">//关闭中继功能</span>
<span class="cp">#define CAN_RELAY_CAN1TO2   0x01    </span><span class="c1">//CAN1 --&gt; CAN2 CAN1收到数据后通过CAN2转发出去</span>
<span class="cp">#define CAN_RELAY_CAN2TO1   0x10    </span><span class="c1">//CAN2 --&gt; CAN1 CAN2收到数据后通过CAN1转发出去</span>
<span class="cp">#define CAN_RELAY_CANALL    0x11    </span><span class="c1">//CAN1 &lt;-&gt; CAN2 CAN1收到数据后通过CAN2转发出去,CAN2收到数据后通过CAN1转发出去</span>
<span class="cp">#define CAN_RELAY_ONLINE    0x88	</span><span class="c1">//根据中继数据进行在线转换，需要调用CAN_SetOnlineRelayData函数</span>
<span class="cp">#ifdef __cplusplus</span>
<span class="k">extern</span><span class="w"> </span><span class="s">&quot;C&quot;</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="cp">#endif</span>

<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_Init</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PCAN_INIT_CONFIG</span><span class="w"> </span><span class="n">pCanConfig</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_Filter_Init</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PCAN_FILTER_CONFIG</span><span class="w"> </span><span class="n">pFilterConfig</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_StartGetMsg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_StopGetMsg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_SendMsg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PCAN_MSG</span><span class="w"> </span><span class="n">pCanSendMsg</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">SendMsgNum</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_GetMsg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PCAN_MSG</span><span class="w"> </span><span class="n">pCanGetMsg</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_GetMsgWithSize</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">CAN_MSG</span><span class="w"> </span><span class="o">*</span><span class="n">pCanGetMsg</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">BufferSize</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_ClearMsg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_GetStatus</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PCAN_STATUS</span><span class="w"> </span><span class="n">pCANStatus</span><span class="p">);</span><span class="w"></span>
<span class="c1">//以调度表的方式发送数据，可以精确的控制每帧之间的间隔时间</span>
<span class="cm">/**</span>
<span class="cm">  * @brief  设置CAN调度表数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  CANIndex CAN通道号，取值0或者1</span>
<span class="cm">  * @param  pCanMsgTab CAN调度表列表首地址</span>
<span class="cm">  * @param  pMsgNum 调度表列表中每个调度表包含消息帧数</span>
<span class="cm">  * @param  pSendTimes 每个调度表里面帧发送次数，若为0xFFFF，则循环发送，通过调用CAN_StopSchedule函数停止调用</span>
<span class="cm">  * @param  MsgTabNum 调度表数</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_SetSchedule</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="n">PCAN_MSG</span><span class="w"> </span><span class="n">pCanMsgTab</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pMsgNum</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="o">*</span><span class="n">pSendTimes</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">MsgTabNum</span><span class="p">);</span><span class="w"></span>
<span class="cm">/**</span>
<span class="cm">  * @brief  启动调度表</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  CANIndex CAN通道号，取值0或者1</span>
<span class="cm">  * @param  MsgTabIndex CAN调度表索引号</span>
<span class="cm">  * @param  TimePrecMs 调度表时间精度，比如调度表里面最小帧周期为10ms，那么就建议设置为10</span>
<span class="cm">  * @param  OrderSend 设置为1则顺序发送调度表里面的帧，设置为0则并行发送调度表里面的帧 </span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_StartSchedule</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">MsgTabIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">TimePrecMs</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">OrderSend</span><span class="p">);</span><span class="w"></span>
<span class="cm">/**</span>
<span class="cm">  * @brief  停止调度方式发送数据</span>
<span class="cm">  * @param  DevHandle 设备索引号</span>
<span class="cm">  * @param  CANIndex CAN通道号，取值0或者1</span>
<span class="cm">  * @param  MsgTabIndex CAN调度表索引号</span>
<span class="cm">  * @retval 函数执行状态，小于0函数执行出错</span>
<span class="cm">  */</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_StopSchedule</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">);</span><span class="w"></span>


<span class="c1">//CAN中继相关函数</span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_SetRelayData</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="n">CAN_RELAY_HEAD</span><span class="w"> </span><span class="o">*</span><span class="n">pCANRelayHead</span><span class="p">,</span><span class="w"> </span><span class="n">CAN_RELAY_DATA</span><span class="w"> </span><span class="o">*</span><span class="n">pCANRelayData</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_GetRelayData</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="n">CAN_RELAY_HEAD</span><span class="w"> </span><span class="o">*</span><span class="n">pCANRelayHead</span><span class="p">,</span><span class="w"> </span><span class="n">CAN_RELAY_DATA</span><span class="w"> </span><span class="o">*</span><span class="n">pCANRelayData</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_SetRelay</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="w"> </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">RelayState</span><span class="p">);</span><span class="w"></span>
<span class="c1">//老版本接口函数，不建议再使用</span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_BL_Init</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="n">PCAN_INIT_CONFIG</span><span class="w"> </span><span class="n">pInitConfig</span><span class="p">,</span><span class="n">PCBL_CMD_LIST</span><span class="w"> </span><span class="n">pCmdList</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_BL_NodeCheck</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">NodeAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">pVersion</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">pType</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOut</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_BL_Erase</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">NodeAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">FlashSize</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOut</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_BL_Write</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">NodeAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">AddrOffset</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pData</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">DataNum</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOut</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_BL_Excute</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">NodeAddr</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">Type</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">CAN_BL_SetNewBaudRate</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">CANIndex</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">NodeAddr</span><span class="p">,</span><span class="n">PCAN_INIT_CONFIG</span><span class="w"> </span><span class="n">pInitConfig</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">NewBaudRate</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">TimeOut</span><span class="p">);</span><span class="w"></span>

<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w">  </span><span class="nf">CAN_DecodeListFile</span><span class="p">(</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pFileName</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">pIgnoreIDList</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">IgnoreIDListLen</span><span class="p">);</span><span class="w"></span>
<span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w">  </span><span class="nf">CAN_GetListFileMsg</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">MsgIndex</span><span class="p">,</span><span class="kt">int</span><span class="w"> </span><span class="n">MsgLen</span><span class="p">,</span><span class="n">CAN_MSG</span><span class="w"> </span><span class="o">*</span><span class="n">pCANMsg</span><span class="p">);</span><span class="w"></span>

<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span><span class="w"></span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>
</pre></div>
</div> 
<div id="winchm_template_footer">Copyright &copy; 2018. All rights reserved.</div>
</body>
</html>
