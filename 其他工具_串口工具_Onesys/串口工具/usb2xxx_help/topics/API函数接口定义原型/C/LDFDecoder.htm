
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0014)about:internet -->
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>LDFDecoder.h</title>
<meta name="GENERATOR" content="WinCHM">
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<style>
html,body { 
	/* Default Font */
	font-family: Arial, Helvetica, sans-serif;
	font-size: 13pt;
    font-weight: 500;
}
</style>


<meta http-equiv="X-UA-Compatible" content="IE=8">
<style>
html {
	overflow-y:scroll;
}

body {
	background-image: url(../../template1/back.png);
	background-repeat: repeat-x;
	background-color: #FFFFFF;
	padding: 0px;
	margin-top: 15px;
	margin-left: 15px;
	margin-bottom: 15px;
	margin-right: 15px;
}

#winchm_template_button {
	position: fixed; 
	float: right; 
	right: 15px; 
	top: 15px;
}

#winchm_template_navigation {
	padding: 0px;
	margin-top: 0px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	font-size: 8pt;
	font-family: Arial, Helvetica, sans-serif;
	color: #4A4A4A;
	text-align: left;
}

#winchm_template_title {
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	font-family: Tahoma, Geneva, sans-serif;
	font-size: 22px;
	font-weight: bold;
	color: #005680;
	text-align: left;
}

#winchm_template_content{
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	width: auto  !important;
	width: 100%;
}


#winchm_template_footer {
	padding: 0px;
	margin-top: 15px;
	margin-left: 0px;
	margin-bottom: 15px;
	margin-right: 0px;

	padding-top: 7px;
	border-width: 1px;
	border-color: #c0c0c0;
	border-top-style: solid;

	font-family: Arial, Helvetica, sans-serif;
	font-size: 10px;
	color: #575757;
	text-align: left;
}

@media print
{
#winchm_template_button{
visibility:hidden;
}
}

#winchm_template_navigation a:link	{text-decoration: none;color: 004080}
#winchm_template_navigation a:visited  {text-decoration: none; color: #004080}
#winchm_template_navigation a:active {text-decoration: none; color: #004080}
#winchm_template_navigation a:hover {text-decoration: none;color: #0000FF}

a:link	{text-decoration: underline; color:#0033cc}
a:visited  {text-decoration: underline; color: #0033cc}
a:active {text-decoration: underline; color: #0033cc }
a:hover {text-decoration: underline;color: #ff0000;}

</style>
</head>
<style type="text/css"> .hll { background-color: #ffffcc }</style>
<style type="text/css">  { background: #ffffff; }</style>
<style type="text/css"> .c { color: #177500 } </style>
<style type="text/css"> .err { color: #000000 } </style>
<style type="text/css"> .k { color: #A90D91 } </style>
<style type="text/css"> .l { color: #1C01CE } </style>
<style type="text/css"> .n { color: #000000 } </style>
<style type="text/css"> .o { color: #000000 } </style>
<style type="text/css"> .ch { color: #177500 } </style>
<style type="text/css"> .cm { color: #177500 } </style>
<style type="text/css"> .cp { color: #633820 } </style>
<style type="text/css"> .cpf { color: #177500 } </style>
<style type="text/css"> .c1 { color: #177500 } </style>
<style type="text/css"> .cs { color: #177500 } </style>
<style type="text/css"> .kc { color: #A90D91 } </style>
<style type="text/css"> .kd { color: #A90D91 } </style>
<style type="text/css"> .kn { color: #A90D91 } </style>
<style type="text/css"> .kp { color: #A90D91 } </style>
<style type="text/css"> .kr { color: #A90D91 } </style>
<style type="text/css"> .kt { color: #A90D91 } </style>
<style type="text/css"> .ld { color: #1C01CE } </style>
<style type="text/css"> .m { color: #1C01CE } </style>
<style type="text/css"> .s { color: #C41A16 } </style>
<style type="text/css"> .na { color: #836C28 } </style>
<style type="text/css"> .nb { color: #A90D91 } </style>
<style type="text/css"> .nc { color: #3F6E75 } </style>
<style type="text/css"> .no { color: #000000 } </style>
<style type="text/css"> .nd { color: #000000 } </style>
<style type="text/css"> .ni { color: #000000 } </style>
<style type="text/css"> .ne { color: #000000 } </style>
<style type="text/css"> .nf { color: #000000 } </style>
<style type="text/css"> .nl { color: #000000 } </style>
<style type="text/css"> .nn { color: #000000 } </style>
<style type="text/css"> .nx { color: #000000 } </style>
<style type="text/css"> .py { color: #000000 } </style>
<style type="text/css"> .nt { color: #000000 } </style>
<style type="text/css"> .nv { color: #000000 } </style>
<style type="text/css"> .ow { color: #000000 } </style>
<style type="text/css"> .mb { color: #1C01CE } </style>
<style type="text/css"> .mf { color: #1C01CE } </style>
<style type="text/css"> .mh { color: #1C01CE } </style>
<style type="text/css"> .mi { color: #1C01CE } </style>
<style type="text/css"> .mo { color: #1C01CE } </style>
<style type="text/css"> .sa { color: #C41A16 } </style>
<style type="text/css"> .sb { color: #C41A16 } </style>
<style type="text/css"> .sc { color: #2300CE } </style>
<style type="text/css"> .dl { color: #C41A16 } </style>
<style type="text/css"> .sd { color: #C41A16 } </style>
<style type="text/css"> .s2 { color: #C41A16 } </style>
<style type="text/css"> .se { color: #C41A16 } </style>
<style type="text/css"> .sh { color: #C41A16 } </style>
<style type="text/css"> .si { color: #C41A16 } </style>
<style type="text/css"> .sx { color: #C41A16 } </style>
<style type="text/css"> .sr { color: #C41A16 } </style>
<style type="text/css"> .s1 { color: #C41A16 } </style>
<style type="text/css"> .ss { color: #C41A16 } </style>
<style type="text/css"> .bp { color: #5B269A } </style>
<style type="text/css"> .fm { color: #000000 } </style>
<style type="text/css"> .vc { color: #000000 } </style>
<style type="text/css"> .vg { color: #000000 } </style>
<style type="text/css"> .vi { color: #000000 } </style>
<style type="text/css"> .vm { color: #000000 } </style>
<style type="text/css"> .il { color: #1C01CE } </style>
<body><script language="JavaScript" type="text/JavaScript">
function syn(){
if(parent.nav.tree){
 if(parent.nav.tree.loaded){
  parent.nav.tree.selectNode(104);
 }else{
  setTimeout("syn()",500);
}
  }else{
  setTimeout("syn()",500);
  }}
if(parent!=self){
  setTimeout("syn()",100);
}else{
  parent.location.href = "../../../index.htm?page=API函数接口定义原型/C/LDFDecoder.htm";
}
originalOnload = window.onload;
if(originalOnload==null){
window.onload = function(){parent.contentLoaded = true;};
}else{
window.onload = function(){originalOnload();parent.contentLoaded = true;};
}
</script> 

<div id="winchm_template_button"><A href="usb2uart.htm" title="Previous topic"><img id="winchm_template_prev" alt="Previous topic" src="../../template1/btn_prev_n.gif" border="0"></a><A href="usb2dac.htm" title="Next topic"><img id="winchm_template_next" alt="Next topic" src="../../template1/btn_next_n.gif" border="0"></a></div>
<div id="winchm_template_navigation">Help &gt; 
<A href="../函数原型.htm">函数原型</A> &gt; </div>
<div id="winchm_template_title">LDFDecoder.h</div>
<div id="winchm_template_content">
<div class="highlight"><pre><span></span><span class="cm">/*******************************************************************************</span>
<span class="cm">  * @file    LDFDecoder.h</span>
<span class="cm">  * $Author: wdluo $</span>
<span class="cm">  * $Revision: 447 $</span>
<span class="cm">  * $Date:: 2013-06-29 18:24:57 +0800 #$</span>
<span class="cm">  * @brief   LDF文件解析相关函数和数据类型定义.</span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  * @attention</span>
<span class="cm">  *</span>
<span class="cm">  *&lt;center&gt;&lt;a href=&quot;http:\\www.toomoss.com&quot;&gt;http://www.toomoss.com&lt;/a&gt;&lt;/center&gt;</span>
<span class="cm">  *&lt;center&gt;All Rights Reserved&lt;/center&gt;&lt;/h3&gt;</span>
<span class="cm">  * </span>
<span class="cm">  ******************************************************************************</span>
<span class="cm">  */</span><span class="w"></span>
<span class="cp">#ifndef __LDFDECODER_H_</span>
<span class="cp">#define __LDFDECODER_H_</span>

<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdint.h&gt;</span><span class="cp"></span>
<span class="cp">#ifndef OS_UNIX</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;Windows.h&gt;</span><span class="cp"></span>
<span class="cp">#else</span>
<span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;unistd.h&gt;</span><span class="cp"></span>
<span class="cp">#ifndef WINAPI</span>
<span class="cp">#define WINAPI</span>
<span class="cp">#endif</span>
<span class="cp">#endif</span>

<span class="cp">#define LDF_SUCCESS                 0   </span><span class="c1">//操作成功</span>
<span class="cp">#define LDF_ERROR_FILE_OPEN         (-1)</span><span class="c1">//打开文件出错</span>
<span class="cp">#define LDF_ERROR_FILE_FORMAT       (-2)</span><span class="c1">//文件格式错误</span>
<span class="cp">#define LDF_ERROR_DEV_DISCONNECT    (-3)</span><span class="c1">//设备未连接</span>

<span class="c1">//逻辑类型编码值</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_CODING_LOGICAL</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">RawValue</span><span class="p">;</span><span class="w">       </span><span class="c1">//实际值</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pDescription</span><span class="p">;</span><span class="w"> </span><span class="c1">//逻辑值编码字符串</span>
<span class="p">}</span><span class="n">LDF_CODING_LOGICAL</span><span class="p">;</span><span class="w"></span>

<span class="c1">//物理类型编码值，信号物理值=信号实际值*Factor+Offset</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_CODING_PHYSICAL</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">double</span><span class="w"> </span><span class="n">Offset</span><span class="p">;</span><span class="w">   </span><span class="c1">//信号物理值偏移量</span>
<span class="w">    </span><span class="kt">double</span><span class="w"> </span><span class="n">Factor</span><span class="p">;</span><span class="w">   </span><span class="c1">//信号缩放因子</span>
<span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">Minimum</span><span class="p">;</span><span class="w">    </span><span class="c1">//信号实际最小值，注意不是物理值</span>
<span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">Maximum</span><span class="p">;</span><span class="w">    </span><span class="c1">//信号实际最大值，注意不是物理值</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pUnit</span><span class="p">;</span><span class="w">    </span><span class="c1">//信号物理值单位</span>
<span class="p">}</span><span class="n">LDF_CODING_PHYSICAL</span><span class="p">;</span><span class="w"></span>

<span class="c1">//信号中的值类型</span>
<span class="k">enum</span><span class="w"> </span><span class="n">LDF_SIGNAL_VALUE_TYPE</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_SIGNAL_VALUE_TYPE_SCALAR</span><span class="p">,</span><span class="w">   </span><span class="c1">//标量值</span>
<span class="w">    </span><span class="n">LDF_SIGNAL_VALUE_TYPE_ARRAY</span><span class="w">     </span><span class="c1">//数组值</span>
<span class="p">};</span><span class="w"></span>

<span class="c1">//信号值编码类型</span>
<span class="k">enum</span><span class="w"> </span><span class="n">LDF_SIGNAL_CODING_TYPE</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_SIGNAL_CODING_TYPE_NONE</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_SIGNAL_CODING_TYPE_PHYSICAL</span><span class="p">,</span><span class="c1">//物理值</span>
<span class="w">    </span><span class="n">LDF_SIGNAL_CODING_TYPE_LOGICAL</span><span class="w">  </span><span class="c1">//逻辑值</span>
<span class="p">};</span><span class="w"></span>

<span class="c1">//信号类型</span>
<span class="k">enum</span><span class="w"> </span><span class="n">LDF_SIGNAL_TYPE</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_SIGNAL_TYPE_NORMAL</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_SIGNAL_TYPE_DIAGNOSTIC</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="c1">//帧类型</span>
<span class="k">enum</span><span class="w"> </span><span class="n">LDF_FRAME_TYPE</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_FRAME_TYPE_NORMAL</span><span class="p">,</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_FRAME_TYPE_DIAGNOSTIC</span><span class="w"></span>
<span class="p">};</span><span class="w"></span>

<span class="c1">//信号编码</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_SIGNAL_CODING</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pName</span><span class="p">;</span><span class="w">                            </span><span class="c1">//信号编码名称</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">LogicalValueLen</span><span class="p">;</span><span class="w">                    </span><span class="c1">//逻辑值长度</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">PhysicalValueLen</span><span class="p">;</span><span class="w">                   </span><span class="c1">//物理值长度</span>
<span class="w">    </span><span class="n">LDF_CODING_LOGICAL</span><span class="w"> </span><span class="o">*</span><span class="n">pLogicalValues</span><span class="p">;</span><span class="w">     </span><span class="c1">//逻辑值列表指针</span>
<span class="w">    </span><span class="n">LDF_CODING_PHYSICAL</span><span class="w"> </span><span class="o">*</span><span class="n">pPhysicalValues</span><span class="p">;</span><span class="w">   </span><span class="c1">//物理值列表指针</span>
<span class="p">}</span><span class="n">LDF_SIGNAL_CODING</span><span class="p">;</span><span class="w"></span>

<span class="c1">//信号和信号编码对应值</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_SIGNAL_REPRESENTATION</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pSignalName</span><span class="p">;</span><span class="w">  </span><span class="c1">//信号名称</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pCodingName</span><span class="p">;</span><span class="w">  </span><span class="c1">//编码名称</span>
<span class="p">}</span><span class="n">LDF_SIGNAL_REPRESENTATION</span><span class="p">;</span><span class="w"></span>

<span class="c1">//信号值结构体，结构体里面的值二取一，并不是同时存在</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_SIGNAL_VALUE</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">long</span><span class="w"> </span><span class="kt">long</span><span class="w"> </span><span class="n">ScalarValue</span><span class="p">;</span><span class="w">      </span><span class="c1">//物理值</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">ArrayValue</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="c1">//数组</span>
<span class="p">}</span><span class="n">LDF_SIGNAL_VALUE</span><span class="p">;</span><span class="w"></span>

<span class="c1">//信号编码</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_LIN_SIGNAL</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pName</span><span class="p">;</span><span class="w">                    </span><span class="c1">//信号名称</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">Size</span><span class="p">;</span><span class="w">                       </span><span class="c1">//信号大小，单位为bit</span>
<span class="w">    </span><span class="n">LDF_SIGNAL_TYPE</span><span class="w"> </span><span class="n">Type</span><span class="p">;</span><span class="w">           </span><span class="c1">//普通信号或者诊断信号</span>
<span class="w">    </span><span class="n">LDF_SIGNAL_VALUE_TYPE</span><span class="w"> </span><span class="n">ValueType</span><span class="p">;</span><span class="c1">//数值或者数组</span>
<span class="w">    </span><span class="n">LDF_SIGNAL_VALUE</span><span class="w"> </span><span class="n">Value</span><span class="p">;</span><span class="w">         </span><span class="c1">//信号值</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pPublisher</span><span class="p">;</span><span class="w">               </span><span class="c1">//信号发布者名称，可能为主机或者从机</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">SubscriberLen</span><span class="p">;</span><span class="w">              </span><span class="c1">//接收该信号节点长度</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pSubscribers</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span><span class="w">         </span><span class="c1">//接收该信号的节点名称数组</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">Offset</span><span class="p">;</span><span class="w">                     </span><span class="c1">//该信号在8字节数据中的偏移量</span>
<span class="w">    </span><span class="n">LDF_SIGNAL_CODING</span><span class="w"> </span><span class="n">SignalCodings</span><span class="p">;</span><span class="c1">//信号编码</span>
<span class="p">}</span><span class="n">LDF_LIN_SIGNAL</span><span class="p">;</span><span class="w"></span>

<span class="c1">//帧，每帧数据包含多个信号</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_LIN_FRAME</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pName</span><span class="p">;</span><span class="w">                </span><span class="c1">//帧名称</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">ID</span><span class="p">;</span><span class="w">           </span><span class="c1">//帧ID</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pPublisher</span><span class="p">;</span><span class="w">           </span><span class="c1">//发布者名称</span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">Size</span><span class="p">;</span><span class="w">         </span><span class="c1">//帧长度，单位为字节</span>
<span class="w">    </span><span class="n">LDF_FRAME_TYPE</span><span class="w"> </span><span class="n">Type</span><span class="p">;</span><span class="w">        </span><span class="c1">//帧类型</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">SignalListLen</span><span class="p">;</span><span class="w">          </span><span class="c1">//信号长度</span>
<span class="w">    </span><span class="n">LDF_LIN_SIGNAL</span><span class="w"> </span><span class="o">*</span><span class="n">pSignalList</span><span class="p">;</span><span class="c1">//信号指针</span>
<span class="p">}</span><span class="n">LDF_LIN_FRAME</span><span class="p">;</span><span class="w"></span>
<span class="c1">//节点结构体</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_LIN_NODE</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pMasterName</span><span class="p">;</span><span class="w">      </span><span class="c1">//主机名称</span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">time_base</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">jitter</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">SlaveLen</span><span class="p">;</span><span class="w">           </span><span class="c1">//从机数量</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pSlaveNames</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span><span class="w">  </span><span class="c1">//从机名称数组</span>
<span class="p">}</span><span class="n">LDF_LIN_NODE</span><span class="p">;</span><span class="w"></span>

<span class="c1">//调度表命令</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_LIN_SCH_CMD</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="n">LDF_LIN_FRAME</span><span class="w"> </span><span class="n">Frame</span><span class="p">;</span><span class="w">    </span><span class="c1">//LIN帧</span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">DelayOfMs</span><span class="p">;</span><span class="w">        </span><span class="c1">//延时时间，单位为毫秒</span>
<span class="p">}</span><span class="n">LDF_LIN_SCH_CMD</span><span class="p">;</span><span class="w"></span>

<span class="c1">//调度表</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_LIN_SCH</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pName</span><span class="p">;</span><span class="w">                        </span><span class="c1">//调度表名称</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">ScheduleCmdLen</span><span class="p">;</span><span class="w">                 </span><span class="c1">//该表下面包含的帧数</span>
<span class="w">    </span><span class="n">LDF_LIN_SCH_CMD</span><span class="w"> </span><span class="o">*</span><span class="n">pScheduleCmdList</span><span class="p">;</span><span class="w">  </span><span class="c1">//改表下面的帧列表</span>
<span class="p">}</span><span class="n">LDF_LIN_SCH</span><span class="p">;</span><span class="w"></span>

<span class="c1">//节点属性</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_NODE_ATTR</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pName</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">short</span><span class="w"> </span><span class="n">LIN_protocol</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">configured_NAD</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="n">initial_NAD</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="k">struct</span><span class="w"> </span><span class="p">{</span><span class="w"></span>
<span class="w">        </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">supplier_id</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">function_id</span><span class="p">;</span><span class="w"></span>
<span class="w">        </span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">variant</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="p">}</span><span class="n">product_id</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">response_error</span><span class="p">;</span><span class="c1">//signal_name</span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">fault_state_signals</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">fault_state_signal_len</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">P2_min</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">ST_min</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">N_As_timeout</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">float</span><span class="w"> </span><span class="n">N_Cr_timeout</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">configurable_frames</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">configurable_frame_len</span><span class="p">;</span><span class="w"></span>
<span class="p">}</span><span class="n">LDF_NODE_ATTR</span><span class="p">;</span><span class="w"></span>

<span class="c1">//解析后的LDF文件内容</span>
<span class="k">typedef</span><span class="w"> </span><span class="k">struct</span><span class="w"> </span><span class="nc">_LDF_CODING</span><span class="p">{</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">ProtocolVersion</span><span class="p">;</span><span class="w">        </span><span class="c1">//LIN protocol version,实际版本号的一百倍值，比如当前值为210，那么实际版本为2.1</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">LanguageVersion</span><span class="p">;</span><span class="w">        </span><span class="c1">//LIN language version,实际版本号的一百倍值，比如当前值为210，那么实际版本为2.1</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">;</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">LINSpeed</span><span class="p">;</span><span class="w">               </span><span class="c1">//LIN总线波特率，单位为bps</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">LINIndex</span><span class="p">;</span><span class="w">               </span><span class="c1">//LIN通道号</span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">isMaster</span><span class="p">;</span><span class="w">              </span><span class="c1">//当前节点为主节点还是从节点</span>
<span class="w">    </span><span class="kt">bool</span><span class="w"> </span><span class="n">HaveInit</span><span class="p">;</span><span class="w">              </span><span class="c1">//已经成功初始化</span>
<span class="w">    </span><span class="n">LDF_LIN_NODE</span><span class="w"> </span><span class="o">*</span><span class="n">pNode</span><span class="p">;</span><span class="w">        </span><span class="c1">//节点指针</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">FrameLen</span><span class="p">;</span><span class="w">               </span><span class="c1">//帧长度</span>
<span class="w">    </span><span class="n">LDF_LIN_FRAME</span><span class="w"> </span><span class="o">*</span><span class="n">pFrames</span><span class="p">;</span><span class="w">     </span><span class="c1">//帧指针</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">NodeAttrLen</span><span class="p">;</span><span class="w">            </span><span class="c1">//节点属性长度</span>
<span class="w">    </span><span class="n">LDF_NODE_ATTR</span><span class="w"> </span><span class="o">*</span><span class="n">pNodeAttrs</span><span class="p">;</span><span class="w">  </span><span class="c1">//节点属性指针</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">LINSchLen</span><span class="p">;</span><span class="w">              </span><span class="c1">//调度表长度</span>
<span class="w">    </span><span class="n">LDF_LIN_SCH</span><span class="w"> </span><span class="o">*</span><span class="n">pLINSch</span><span class="p">;</span><span class="w">       </span><span class="c1">//调度表指针</span>
<span class="p">}</span><span class="n">LDF_CODING</span><span class="p">;</span><span class="w"></span>

<span class="cp">#ifdef __cplusplus</span>
<span class="k">extern</span><span class="w"> </span><span class="s">&quot;C&quot;</span><span class="w"></span>
<span class="p">{</span><span class="w"></span>
<span class="cp">#endif</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">LDF_Decode</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">DevHandle</span><span class="p">,</span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pLDFFileName</span><span class="p">,</span><span class="n">LDF_CODING</span><span class="w"> </span><span class="o">*</span><span class="n">pLDFCoding</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">LDF_DataRawToFrame</span><span class="p">(</span><span class="n">LDF_LIN_FRAME</span><span class="w"> </span><span class="o">*</span><span class="n">pFrame</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pRawData</span><span class="p">);</span><span class="w"></span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">WINAPI</span><span class="w"> </span><span class="nf">LDF_DataFrameToRaw</span><span class="p">(</span><span class="n">LDF_LIN_FRAME</span><span class="w"> </span><span class="o">*</span><span class="n">pFrame</span><span class="p">,</span><span class="kt">unsigned</span><span class="w"> </span><span class="kt">char</span><span class="w"> </span><span class="o">*</span><span class="n">pRawData</span><span class="p">);</span><span class="w"></span>
<span class="cp">#ifdef __cplusplus</span>
<span class="p">}</span><span class="w"></span>
<span class="cp">#endif</span>

<span class="cp">#endif</span>
</pre></div>
</div> 
<div id="winchm_template_footer">Copyright &copy; 2018. All rights reserved.</div>
</body>
</html>
